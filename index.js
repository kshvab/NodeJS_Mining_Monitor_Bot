var TelegramBot=require('node-telegram-bot-api');
var fs = require('fs');
var token='612583872:AAGc3jDt_Rc7xiCn3wCjujrn35KfNHIzcbk';	//main
//var token='598509339:AAGouiHG2XfC6a7ASi3mYr1dPCgq8Y4UxZA';	//test


var bot=new TelegramBot(token,{polling:true});

var actMonitor = new Object;
	actMonitor={};

var tStart = Date.now();

 function timeConversion(millisec) {

        var seconds = (millisec / 1000).toFixed(1);

        var minutes = (millisec / (1000 * 60)).toFixed(1);

        var hours = (millisec / (1000 * 60 * 60)).toFixed(1);

        var days = (millisec / (1000 * 60 * 60 * 24)).toFixed(1);

        if (seconds < 60) {
            return seconds + " Sec";
        } else if (minutes < 60) {
            return minutes + " Min";
        } else if (hours < 24) {
            return hours + " Hrs";
        } else {
            return days + " Days"
        }
    };



bot.on('message', (msg) => {
	fPokazMainButton(msg)
});

function fPokazMainButton(msg){

	var topMes;

	switch (msg.text) {
  		case '/BALANCE':
    		topMes = "üí¨ BALANCE";
    		break;
		case '/Balance':
    		topMes = "üí¨ BALANCE";
    		break;
		case '/balance':
    		topMes = "üí¨ BALANCE";
    		break;
		case '/DASHBOARD':
    		topMes = "üí¨ DASHBOARD";
    		break;
		case '/dashboard':
    		topMes = "üí¨ DASHBOARD";
    		break;
		case '/STOP':
    		topMes = "‚ö†Ô∏è –ó—É–ø–∏–Ω—è—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É—Å—ñ—Ö –í–∞—à–∏—Ö –∞–¥—Ä–µ—Å.";
    		break;
		case '/help':
    		topMes = "üí¨ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è";
    		break;
		case '/Stop':
    		topMes = "‚ö†Ô∏è –ó—É–ø–∏–Ω—è—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É—Å—ñ—Ö –í–∞—à–∏—Ö –∞–¥—Ä–µ—Å.";
    		break;
		case '/stop':
    		topMes = "‚ö†Ô∏è –ó—É–ø–∏–Ω—è—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É—Å—ñ—Ö –í–∞—à–∏—Ö –∞–¥—Ä–µ—Å.";
    		break;
		case '/TOP10':
    		topMes = "üí¨ TOP10 from coinmarketcap.com";
    		break;
  		case undefined:
   			topMes = "üí¨ Ok, –∑–∞—Ä–∞–∑ —É—Å—å–æ –±—É–¥–µ...";
    		break;			
  		default:
    		topMes = "üí¨ Sorry, no time for chatting, need to monitor üòé\nü§ñ Created by K. Shvab (CyberDream.Club)";
	}
	

	const keyboard = {
            reply_markup: {
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [["/DASHBOARD","/BALANCE"],["/TOP10","/stop","/help"]]
        	}
	};
	
	chatId = msg.hasOwnProperty('chat') ? msg.chat.id : msg.from.id;
	bot.sendMessage(chatId, topMes, keyboard);
	
};

function fHelp(msg){
	
	bot.sendMessage(msg.from.id, 'üí¨ –ù–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏, –Ω–∞ —è–∫—ñ –í–∏ –∑–¥—ñ–π—Å–Ω—é—î—Ç–µ –º–∞–π–Ω—ñ–Ω–≥\n‚ùì –Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É?\nüí° –ü—Ä–∏–∫–ª–∞–¥ –¥–ª—è ETH:\n/0xsf5sef4ghjg...\n/ETH 0xsf5sef4ghjg...\n/eth 0xsf5sef4ghjg...\nüí° –ü—Ä–∏–∫–ª–∞–¥ –¥–ª—è ZEC:\n/t5ehgsef4ghjg...\n/ZEC t5ehgsef4ghjg...\n/zec t5ehgsef4ghjg...');
};

function fTop10(msg){
	var userId = msg.from.id;
	
	var request = require('request');
	var apiUrl = 'https://api.coinmarketcap.com/v2/ticker/?convert=USD&limit=10&sort=market_cap';
			
    request(apiUrl, function (error, response, body) {

        if (error) {
            console.log(error);
            return;
        };

		var obj = JSON.parse(body);
		
		
		//*********** Adding new numeration ***********
		var k = 0;
		
		for (var i in obj.data) {
			obj.data[k] = obj.data[i];
			k++
		};
		
		for (var i in obj.data) {
			if (k<=0) delete obj.data[i];
			k--;
		};
		

		//*********** SORTING ***********
		for (var i = 9; i > 0; i--) {
			for (var j = 0; j < i; j++) {
				if (obj.data[j].quotes.USD.market_cap < obj.data[j+1].quotes.USD.market_cap){
					var Temp = obj.data[j];
					obj.data[j] = obj.data[j+1];
					obj.data[j+1] = Temp;
				};
			};
		};
		
		
		//*********** OUTPUT ***********
		var text = '';
		for (var i in obj.data) {
			var A,
				B;
			if ((obj.data[i].quotes.USD.percent_change_24h) > 0){
				A = 'üéæ ';
				B = ' (+';
			}
			else {
				A = 'üî¥ ';
				B = ' (';
			};
			
			
			text += A + obj.data[i].name + ' $' + (+obj.data[i].quotes.USD.price).toFixed(2) + B + obj.data[i].quotes.USD.percent_change_24h + ')\n'
			
			
			
			

		};	
		console.log(text);
		bot.sendMessage(userId, text);
	});	
};


//*********** –†–æ–±–æ—Ç–∞ –∑ –≥–ª–æ–±–∞–ª—å–æ—é –∑–º—ñ–Ω–Ω–æ—é ***********
/*
function Test2(){
	
	var userId = 8888;
	var Adr = '0x1111';
	var bbb = 'www';
	
	actMonitor[userId] = {};
		
		//{monOnOf: true, [Adr]: true};
	
	actMonitor[userId]['ccc'] = 2;
	actMonitor[userId][bbb] = false;
	console.log(actMonitor[userId][bbb]);
	console.log(JSON.stringify(actMonitor));
	
	
	
	
	
	
	
	
	if(	(actMonitor.hasOwnProperty(userId)) && 	
		(actMonitor[userId].hasOwnProperty(Adr))	&&
		(actMonitor[userId].monOnOf) &&
		(actMonitor[userId][Adr]) ){
	};

};
Test2();
*/


//*********** USER INPUTS ***********
{
	
	
bot.onText(/\/0x(.+)/,function(msg, match){
	var Adr = msg.text.slice(1);
	var Cur = 'ETH';
	initMonitoring(msg, Adr, Cur);
});


bot.onText(/\/t(.+)/,function(msg, match){
	var Adr = msg.text.slice(1);
	var Cur = 'ZEC';
	initMonitoring(msg, Adr, Cur);
});


bot.onText(/\/ETH (.+)/,function(msg,match){
	var Adr = match[1];
	var Cur = 'ETH';
	initMonitoring(msg, Adr, Cur);
});


bot.onText(/\/eth (.+)/,function(msg,match){
	var Adr=match[1];
	var Cur = 'ETH';
	initMonitoring(msg, Adr, Cur);
});


bot.onText(/\/ZEC (.+)/,function(msg,match){
	var Adr=match[1];
	var Cur = 'ZEC';
	initMonitoring(msg, Adr, Cur);
});


bot.onText(/\/zec (.+)/,function(msg,match){
	var Adr=match[1];
	var Cur = 'ZEC';
	initMonitoring(msg, Adr, Cur);
});
	
	
bot.onText(/\/BALANCE/,function(msg, match){
	fShowBalances(msg);
});
	
bot.onText(/\/Balance/,function(msg, match){
	fShowBalances(msg);
});
	
bot.onText(/\/balance/,function(msg, match){
	fShowBalances(msg);
});
	
bot.onText(/\/stop/,function(msg, match){
	console.log('11111111111')
	fStopMonitoring(msg);
});

bot.onText(/\/STOP/,function(msg, match){
	fStopMonitoring(msg);
});
	
bot.onText(/\/Stop/,function(msg, match){
	fStopMonitoring(msg);
});	
	
bot.onText(/\/DASHBOARD/,function(msg, match){
	fInitDashboard(msg);
});		

bot.onText(/\/dashboard/,function(msg, match){
	fInitDashboard(msg);
});	
	
bot.onText(/\/help/,function(msg, match){
	fHelp(msg);
});
	
bot.onText(/\/TOP10/,function(msg, match){
	fTop10(msg);
});
	
}

//*********** DASHBOARD ***********
{
	
function fInitDashboard(msg){
	var userId = msg.from.id;
	
	if	(
	(!(actMonitor.hasOwnProperty(userId))) ||
	(!(actMonitor[userId].monOnOf))
	){
		console.log('=====> –ñ–æ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞—Ä–∞–∑ –Ω–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è');
		bot.sendMessage(userId, '‚ö†Ô∏è –ñ–æ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞—Ä–∞–∑ –Ω–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥–∞–π—Ç–µ –∞–¥—Ä–µ—Å—É.');
	}
	else{
		
		var usrKeys = Object.keys(actMonitor[userId]);
		
		for(var i=0; i<usrKeys.length ;i++)	{
			
			if (usrKeys[i] == 'monOnOf') continue;
			
			var Cur;
			var Adr = usrKeys[i];
			
			if (usrKeys[i][0] == 0){
				Cur = 'ETH';
				fDashboardEth(msg, Adr, Cur);
			}
			else {
				Cur = 'ZEC';
				fDashboardZec(msg, Adr, Cur);
			};
		};
	};
};


function fDashboardEth(msg, Adr, Cur){
	var userId = msg.from.id;
	console.log('EFIRKA');
	
	var request = require('request');
	var apiUrl = 'https://api.ethermine.org/miner/' + Adr + '/workers';
			
    request(apiUrl, function (error, response, body) {
        if (error) {
            console.log(error);
            return;
        };
		var obj = JSON.parse(body);
			
		if (obj.status == 'ERROR'){
			console.log('=====> –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø—É–ª—É ' + Adr);
			bot.sendMessage(userId, '‚ö†Ô∏è –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø—É–ª—É ' + Adr);
		}
		else {

			fAddAtrDb(msg, Adr, Cur, obj);	//–†–æ–∑—à–∏—Ä–∏–ª–∏ –æ–±'—î–∫—Ç

			for (var i=0; i<obj.data.length; i++) {
			obj.data[i].reportedHashrate/=1000000;
			obj.data[i].currentHashrate/=1000000;
			};
				
			fShowRigList (obj);				//–ü–æ–∫–∞–∂–µ–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ–µ—Ä–º–∏
			
		};	
	});	
	
};


function fDashboardZec(msg, Adr, Cur){
console.log('EFIRKA');
	var userId = msg.from.id;
	var request = require('request');
	var apiUrl = 'https://api-zcash.flypool.org/miner/' + Adr + '/workers';
			
    request(apiUrl, function (error, response, body) {
        if (error) {
            console.log(error);
            return;
        };
		var obj = JSON.parse(body);
			
		if (obj.status == 'ERROR'){
			console.log('=====> –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø—É–ª—É ' + Adr);
			bot.sendMessage(userId, '‚ö†Ô∏è –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø—É–ª—É ' + Adr);
		}
		else {

			fAddAtrDb(msg, Adr, Cur, obj);	//–†–æ–∑—à–∏—Ä–∏–ª–∏ –æ–±'—î–∫—Ç
			fShowRigList (obj);				//–ü–æ–∫–∞–∂–µ–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ–µ—Ä–º–∏
		};	
	});	
	
	
	
};

}


//****** –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏ ******
function initMonitoring(msg, Adr, Cur){
	userId = msg.from.id;
	
	console.log('=====> FUNCTION InitMonitoring STARTED')
	console.log('=====> ENTERED ' + Adr)
	
	
	newScanUsrDb(Adr, Cur, function(freshUsrDb) {

		var obj = JSON.parse(freshUsrDb);
		
		if (obj.status == 'ERROR') {
			if (obj.error == 'Invalid address') {
				console.log('=====> –ê–¥—Ä–µ—Å—É –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ!');
				bot.sendMessage(userId, '‚ö†Ô∏è –ê–¥—Ä–µ—Å—É –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ó—ó —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
			}
			else {
				console.log('=====> –ê–¥—Ä–µ—Å–∞ —Å—Ö–æ–∂–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ —è–∫–∞—Å—å —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.');
				bot.sendMessage(userId, '‚ö†Ô∏è –ê–¥—Ä–µ—Å–∞ —Å—Ö–æ–∂–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ —è–∫–∞—Å—å —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. (–∫–æ–¥ –ø–æ–º–∏–ª–∫–∏ 0001)');
			}
		}
		
		else {
			if(
				(actMonitor.hasOwnProperty(userId)) && 	
				(actMonitor[userId].hasOwnProperty(Adr))	&&
				(actMonitor[userId].monOnOf) &&
				(actMonitor[userId][Adr])
			 	){
				console.log('=====> –ê–¥—Ä–µ—Å–∞ —É–∂–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è');
				bot.sendMessage(userId, '‚ö†Ô∏è –ê–¥—Ä–µ—Å–∞ —É–∂–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è');
				}
			else {
				//console.log("=====> –ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–π—à–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, –¥–∞–Ω—ñ –∑ –ø—É–ª—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.");
				
				fAddAtrDb(msg, Adr, Cur, obj);	//–†–æ–∑—à–∏—Ä–∏–ª–∏ –æ–±'—î–∫—Ç
				
				
				if (Cur == 'ETH') {
					for (var i=0; i<obj.data.length; i++) {
					obj.data[i].reportedHashrate/=1000000;
					obj.data[i].currentHashrate/=1000000;
					};
				};
				
				
				fWriteToFile (obj);				//–ó–±–µ—Ä–µ–∂–µ–º–æ —É —Ñ–∞–π–ª
				
				//–ó–º—ñ–Ω—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É
				
				if (!(actMonitor.hasOwnProperty(userId))) actMonitor[userId] = {};
				actMonitor[userId].monOnOf = true;
				actMonitor[userId][Adr] = true;
				
				fShowRigList (obj);				//–ü–æ–∫–∞–∂–µ–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ñ–µ—Ä–º–∏
				fStartMonitoring (obj);			//–°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
			};
		};
	});
};


//****** –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ ******
function fAddAtrDb (msg, Adr, Cur, obj) {
	
	if (Cur == 'ETH') {
		obj.currency = 'ETH';
	}
	else {
		obj.currency = 'ZEC';
	};
	
	obj.Adr = Adr;
	obj.userId = msg.from.id;
	obj.userName = msg.from.first_name;
	obj.userSurName = msg.from.second_name;
	obj.userUserName = msg.from.username;	
};


//****** –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –ø—É–ª workers ******
function newScanUsrDb(Adr, Cur, callback){
	var request = require('request');
	var apiUrl;
	if (Cur=='ETH') apiUrl = 'https://api.ethermine.org/miner/' + Adr + '/workers';
	else apiUrl = 'https://api-zcash.flypool.org/miner/' + Adr + '/workers';
	
	request(apiUrl, function (error, response, body) {
        if (error) {
            console.log(error);
            callback ('error');
        }
        else callback(body);
	});
};

//****** –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª ******
function fWriteToFile (obj){
	var destination = 'db\\' + obj.userId + obj.currency + obj.Adr +'.json';
	var JsonString = JSON.stringify(obj);
			
	fs.writeFile(destination, JsonString, function (err) {
  		if (err) throw err;
	});
};

//****** –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É —Ñ–µ—Ä–º ******
function fShowRigList (obj){
	
	var rigsAmount = obj.data.length;
	var curSituation = 'üí¨ '+ obj.currency + ': ' + obj.Adr + '\n' + rigsAmount + ' —Ñ–µ—Ä–º.\n';
	var sumReportedHashrate = 0;
	var sumCurrentHashrate = 0;

	
	for (i=0; i<rigsAmount; i++) {
	
		if (obj.currency == 'ETH') {
			if (!(obj.data[i].reportedHashrate) || !(obj.data[i].currentHashrate)) {
				curSituation += 'üî¥ ' + obj.data[i].worker + ' (' + (+obj.data[i].reportedHashrate).toFixed(0) + 'MH/s / ' + (obj.data[i].currentHashrate).toFixed(0) + 'MH/s)\n'; 
			}
			else {
				curSituation += 'üéæ ' + obj.data[i].worker + ' (' + (+obj.data[i].reportedHashrate).toFixed(0) + 'MH/s / ' + (obj.data[i].currentHashrate).toFixed(0) + 'MH/s)\n';
			};
		}
		else {
			if (!(obj.data[i].currentHashrate)) {
				curSituation += 'üî¥ ' + obj.data[i].worker + ' (' + (+obj.data[i].currentHashrate).toFixed(0) + 'Sol/s)\n'; 
			}
			else {
				curSituation += 'üéæ ' + obj.data[i].worker + ' (' + (+obj.data[i].currentHashrate).toFixed(0) + 'Sol/s)\n';
			};
		};
		

		sumReportedHashrate += obj.data[i].reportedHashrate;
		sumCurrentHashrate += obj.data[i].currentHashrate;
	};
	
	sumReportedHashrate = (sumReportedHashrate).toFixed(0);
	sumCurrentHashrate = (sumCurrentHashrate).toFixed(0);
	if (obj.currency == 'ETH') {
		curSituation += '‚öôÔ∏è Total Reported: ' + sumReportedHashrate + 'MH/s.\n‚öôÔ∏è Total Current: ' + sumCurrentHashrate + 'MH/s.';
	}
	else {
		curSituation += '‚öôÔ∏è Total Current: ' + sumCurrentHashrate + 'Sol/s.';
	};
	

	console.log(curSituation);
	bot.sendMessage(userId, curSituation);
	
};


//****** –°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É ******
function fStartMonitoring (obj) {
	var Cur = obj.currency;
	var userId = obj.userId;
	var Adr=obj.Adr;
		
	var CronJob = require('cron').CronJob;
	var job = new CronJob({
  		cronTime: '*/2 * * * *',
  		onTick: function() {
			var tDurtion = timeConversion(Date.now() - tStart);
			console.log('=====> –ö–†–û–ù! ' + tDurtion + ' ==>' + Adr);

			
			//***** –ó–£–ü–ò–ù–ö–ê –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ *********
			
			if	(
				(!(actMonitor.hasOwnProperty(userId))) ||
				(!(actMonitor[userId].monOnOf))
				){
			  	console.log('=====> –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–¥—Ä–µ—Å–∏ '+ Adr + ' –∑—É–ø–∏–Ω–µ–Ω–æ!');
				bot.sendMessage(userId, '‚ö†Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–¥—Ä–µ—Å–∏ '+ Adr + ' –∑—É–ø–∏–Ω–µ–Ω–æ!');
				this.stop();
				return;
			   };
			
			
			newScanUsrDb(Adr, Cur, function(freshUsrDb) {
				
				
                if (freshUsrDb == 'error') return;

				var newObj = JSON.parse(freshUsrDb);
				
				if (Cur == 'ETH') {
					for (var i=0; i<newObj.data.length; i++) {
					newObj.data[i].reportedHashrate/=1000000;
					newObj.data[i].currentHashrate/=1000000;
					};
				};
				
				
				//console.log('=====> 3. –ü—Ä–æ–π–¥–µ–º–æ—Å—è –ø–æ —Å—Ç–∞—Ä–æ–º—É –æ–±—î–∫—Ç—É:');
				for (i = 0; i < obj.data.length; i++) {
					
					var exist = false;
					var oldHashrate;
					var newHashrate;
					
					for (k = 0; k < newObj.data.length; k++) {
						if (obj.data[i].worker == newObj.data[k].worker) {
							exist = true;
							if (Cur == 'ETH') {
								oldHashrate = obj.data[i].reportedHashrate;
								newHashrate = newObj.data[k].reportedHashrate;
							}
							else {
								oldHashrate = obj.data[i].currentHashrate;
								newHashrate = newObj.data[k].currentHashrate;
							};
								
						};
					};
						
					//console.log(obj.data[i].worker + ' on Pool: ' + exist + ' –•–µ—à—Ä–µ–π—Ç: ' + oldHashrate + ' ==> ' + newHashrate);
						
					if (!(exist)) {
						console.log('=====> ' + obj.data[i].worker + ': Deleted from pool listing');
						bot.sendMessage(userId, '‚ùå ' + obj.data[i].worker + ': Deleted from pool listing');
					};
					
					if ((exist)&&(!(newHashrate))&&(oldHashrate)) {
						console.log('=====> Offline ' + obj.data[i].worker);
						bot.sendMessage(userId, 'üî¥ Offline ' + obj.data[i].worker);
					};
					
					if ((exist)&&(newHashrate)&&(!(oldHashrate))) {
						console.log('=====> Online ' + obj.data[i].worker);
						bot.sendMessage(userId, 'üéæ Online ' + obj.data[i].worker);
					};

				};
				
				//console.log('=====> 4. –ü—Ä–æ–π–¥–µ–º–æ—Å—è –ø–æ –Ω–æ–≤–æ–º—É –æ–±—î–∫—Ç—É:');
				for (i = 0; i < newObj.data.length; i++) {
					var exist = false;
					for (k = 0; k < obj.data.length; k++) {
						if (newObj.data[i].worker == obj.data[k].worker) {
							exist = true;
						};
					};
						
					//console.log(newObj.data[i].worker + ' on Pool: ' + exist );
					if (!(exist)) {
						console.log('=====> ' + newObj.data[i].worker + ': Added to pool');
						bot.sendMessage(userId, 'üéæ Online ' + newObj.data[i].worker + ': Added to pool');
					};
				};
				
				fTransportAtributes (obj, newObj);
				obj=newObj;
				
				
				
				
				
				
				
			
			
			
			
			
			
			
			});
		},
  		start: false,
  		timeZone: 'Europe/Amsterdam'
	});
	
	job.start();			
};

function fTransportAtributes (objFrom, objTo) {
	
	objTo.currency = objFrom.currency;
	objTo.Adr = objFrom.Adr;
	objTo.userId = objFrom.userId;
	objTo.userName = objFrom.userName;
	objTo.userSurName = objFrom.userSurName;
	objTo.userUserName = objFrom.userUserName;
	
};


function fStopMonitoring(msg){
	var userId = msg.from.id;
	if	(actMonitor.hasOwnProperty(userId)){
		actMonitor[userId].monOnOf=false;
		console.log('=====> –ó—É–ø–∏–Ω—è—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É—Å—ñ—Ö –í–∞—à–∏—Ö –∞–¥—Ä–µ—Å.');
		
		
		console.log(JSON.stringify(actMonitor));

		for (var i in actMonitor[userId]) {	
			delete actMonitor[userId][i];
		};
		
		console.log(JSON.stringify(actMonitor));
		
		
		//bot.sendMessage(userId, '‚ö†Ô∏è –ó—É–ø–∏–Ω—è—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É—Å—ñ—Ö –í–∞—à–∏—Ö –∞–¥—Ä–µ—Å.');
	}
	else {
		console.log('=====> –ñ–æ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ –Ω–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è');
		bot.sendMessage(userId, '‚ö†Ô∏è –ñ–æ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ –Ω–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è');
	};
	
};


//*********** BALANCE ***********
{
function fBalanseEth(Adr, userId, Cur){
	var request = require('request');
	var apiUrl = 'https://api.ethermine.org/miner/' + Adr + '/currentStats';
			
    request(apiUrl, function (error, response, body) {
        if (error) {
           console.log(error);
           return;
        };
		var obj = JSON.parse(body);
			
		if (obj.status == 'ERROR'){
			console.log('=====> –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –±–∞–ª–∞–Ω—Å—É –∑–∞ –∞–¥—Ä–µ—Å–æ—é ' + Adr);
			bot.sendMessage(userId, '‚ö†Ô∏è –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –±–∞–ª–∞–Ω—Å—É –∑–∞ –∞–¥—Ä–µ—Å–æ—é ' + Adr);
		}
		else {
			var unpaidBalance = ((+obj.data.unpaid)/1000000000000000000).toFixed(6);
			var usdEarnings = ((+obj.data.usdPerMin)*60*24*30).toFixed(2);
			var curEarnings = ((+obj.data.coinsPerMin)*60*24*30).toFixed(6);
			var msgWithBalance = 'ETH: ' + Adr + '\nüí∞ Unpaid: ' + unpaidBalance + 'ETH\nüí∏ Earning: ' + curEarnings + 'ETH ($' + usdEarnings + ')';

			console.log(msgWithBalance);
			bot.sendMessage(userId, msgWithBalance);
		};	
	});	
};


function fBalanseZec(Adr, userId, Cur){

	var request = require('request');
	var apiUrl = 'https://api-zcash.flypool.org/miner/' + Adr + '/currentStats';
	request(apiUrl, function (error, response, body) {

		var obj = JSON.parse(body);

		if (obj.status == 'ERROR'){
			console.log('=====> –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –±–∞–ª–∞–Ω—Å—É –∑–∞ –∞–¥—Ä–µ—Å–æ—é ' + Adr);
			bot.sendMessage(userId, '‚ö†Ô∏è –ù–µ –º–æ–∂—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –±–∞–ª–∞–Ω—Å—É –∑–∞ –∞–¥—Ä–µ—Å–æ—é ' + Adr);
		}
		else {
			var unpaidBalance = ((+obj.data.unpaid)/100000000).toFixed(6);
			var usdEarnings = ((+obj.data.usdPerMin)*60*24*30).toFixed(2);
			var curEarnings = ((+obj.data.coinsPerMin)*60*24*30).toFixed(6);
			var msgWithBalance = 'ZEC: ' + Adr + '\nüí∞ Unpaid: ' + unpaidBalance + 'ZEC\nüí∏ Earning: ' + curEarnings + 'ZEC ($' + usdEarnings + ')';

			console.log(msgWithBalance);
			bot.sendMessage(userId, msgWithBalance);
		};
	});	
};


function fShowBalances (msg){
	var userId = msg.from.id;
	
	if	(
	(!(actMonitor.hasOwnProperty(userId))) ||
	(!(actMonitor[userId].monOnOf))
	){
		console.log('=====> –ñ–æ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞—Ä–∞–∑ –Ω–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è');
		bot.sendMessage(userId, '‚ö†Ô∏è –ñ–æ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞—Ä–∞–∑ –Ω–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥–∞–π—Ç–µ –∞–¥—Ä–µ—Å—É.');
	}
	else{

		var usrKeys = Object.keys(actMonitor[userId]);
		
		//for (var i in usrKeys) {
		for(var i=0; i<usrKeys.length ;i++)	{
			
			if (usrKeys[i] == 'monOnOf') continue;
			
			var Cur;
			var Adr = usrKeys[i];
			
			if (usrKeys[i][0] == 0){
				Cur = 'ETH';
				fBalanseEth(Adr, userId, Cur);
			}
			else {
				Cur = 'ZEC';
				fBalanseZec(Adr, userId, Cur);
			};
		};	
	};
};
}
